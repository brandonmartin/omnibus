--- ./display.c.orig	2012-03-22 17:33:17.000000000 -0700
+++ ./display.c	2012-03-22 17:58:29.000000000 -0700
@@ -41,6 +41,10 @@
 
 #include <stdio.h>
 
+#ifdef __MSDOS__
+# include <pc.h>
+#endif
+
 /* System-specific feature definitions and include files. */
 #include "rldefs.h"
 #include "rlmbutil.h"
@@ -55,6 +59,14 @@
 #include "rlprivate.h"
 #include "xmalloc.h"
 
+#if defined (_WIN32)
+#include <windows.h>
+extern int haveConsole;
+extern HANDLE hStdout, hStdin;
+extern COORD rlScreenEnd;
+extern int rlScreenMax;
+#endif /* _WIN32 */
+
 #if !defined (strchr) && !defined (__STDC__)
 extern char *strchr (), *strrchr ();
 #endif /* !strchr && !__STDC__ */
@@ -65,6 +77,11 @@
 static void insert_some_chars PARAMS((char *, int, int));
 static void cr PARAMS((void));
 
+#ifdef _WIN32
+# define putc(ch, stream) \
+if ((ch) == '\r') cr (); else _rl_output_character_function (ch)
+#endif
+
 #if defined (HANDLE_MULTIBYTE)
 static int _rl_col_width PARAMS((const char *, int, int));
 static int *_rl_wrapped_line;
@@ -1001,7 +1018,7 @@
 	      _rl_last_c_pos < PROMPT_ENDING_INDEX && local_prompt)
 #endif
 	    {
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
 	      putc ('\r', rl_outstream);
 #else
 	      if (_rl_term_cr)
@@ -1436,7 +1453,7 @@
       _rl_term_cr && lendiff > prompt_visible_length && _rl_last_c_pos > 0 &&
       od >= lendiff && _rl_last_c_pos < PROMPT_ENDING_INDEX)
     {
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
       putc ('\r', rl_outstream);
 #else
       tputs (_rl_term_cr, 1, _rl_output_character_function);
@@ -1504,6 +1521,7 @@
 
   if (col_lendiff > 0)	/* XXX - was lendiff */
     {
+#ifndef _WIN32
       /* Non-zero if we're increasing the number of lines. */
       int gl = current_line >= _rl_vis_botlin && inv_botlin > _rl_vis_botlin;
       /* Sometimes it is cheaper to print the characters rather than
@@ -1557,6 +1575,7 @@
 	    }
 	}
       else
+#endif /* !_WIN32 */
 	{
 	  /* cannot insert chars, write to EOL */
 	  _rl_output_some_chars (nfd, temp);
@@ -1569,6 +1588,7 @@
     }
   else				/* Delete characters from line. */
     {
+#ifndef _WIN32
       /* If possible and inexpensive to use terminal deletion, then do so. */
       if (_rl_term_dc && (2 * col_temp) >= -col_lendiff)
 	{
@@ -1592,6 +1612,7 @@
 	}
       /* Otherwise, print over the existing material. */
       else
+#endif /* !_WIN32 */
 	{
 	  if (temp > 0)
 	    {
@@ -1717,6 +1738,16 @@
      int new;
      const char *data;
 {
+#ifdef _WIN32
+  CONSOLE_SCREEN_BUFFER_INFO     csbi;
+  if ( (_rl_last_c_pos != new)
+       && haveConsole && GetConsoleScreenBufferInfo(hStdout, &csbi) )
+    {
+      csbi.dwCursorPosition.X += new - _rl_last_c_pos;
+      if ( SetConsoleCursorPosition(hStdout, csbi.dwCursorPosition) )
+   _rl_last_c_pos = new;
+    }
+#else /* _WIN32 */
   register int i;
   int woff;			/* number of invisible chars on current line */
   int cpos, dpos;		/* current and desired cursor positions */
@@ -1797,9 +1828,7 @@
 	    }
 	  else
 	    {
-	      tputs (_rl_term_cr, 1, _rl_output_character_function);
-	      for (i = 0; i < new; i++)
-		putc (data[i], rl_outstream);
+	      _rl_backspace (_rl_last_c_pos - _rl_col_width (data, 0, new));
 	    }
 	}
       else
@@ -1817,6 +1846,7 @@
     _rl_backspace (cpos - dpos);
 
   _rl_last_c_pos = dpos;
+#endif /* !_WIN32 */
 }
 
 /* PWP: move the cursor up or down. */
@@ -1824,6 +1854,16 @@
 _rl_move_vert (to)
      int to;
 {
+#if defined (_WIN32)
+  CONSOLE_SCREEN_BUFFER_INFO	csbi;
+  if ( (_rl_last_v_pos != to) && (to <= _rl_screenheight)
+       && haveConsole && GetConsoleScreenBufferInfo(hStdout, &csbi) )
+    {
+      csbi.dwCursorPosition.Y += to - _rl_last_v_pos;
+      if ( SetConsoleCursorPosition(hStdout, csbi.dwCursorPosition) )
+	_rl_last_v_pos = to;
+    }
+#else /* !_WIN32 */
   register int delta, i;
 
   if (_rl_last_v_pos == to || to > _rl_screenheight)
@@ -1842,12 +1882,22 @@
     }
   else
     {			/* delta < 0 */
+#ifdef __MSDOS__
+      int row, col;
+
+      fflush (rl_outstream); /* make sure the cursor pos is current! */
+      ScreenGetCursor (&row, &col);
+      ScreenSetCursor (row + delta, col);
+      i = -delta;    /* in case someone wants to use it after the loop */
+#else /* !__MSDOS__ */
       if (_rl_term_up && *_rl_term_up)
 	for (i = 0; i < -delta; i++)
 	  tputs (_rl_term_up, 1, _rl_output_character_function);
+#endif /* !__MSDOS__ */
     }
 
   _rl_last_v_pos = to;		/* Now TO is here */
+#endif /* _WIN32 */
 }
 
 /* Physically print C on rl_outstream.  This is for functions which know
@@ -2104,10 +2154,31 @@
 _rl_clear_to_eol (count)
      int count;
 {
+#if defined (_WIN32)
+  CONSOLE_SCREEN_BUFFER_INFO	csbi;
+  if (haveConsole && GetConsoleScreenBufferInfo(hStdout, &csbi))
+    {
+      DWORD written;
+      int linear_pos;
+
+      linear_pos = (int)csbi.dwCursorPosition.Y * (int)csbi.dwSize.X
+	+ (int)csbi.dwCursorPosition.X;
+      if (linear_pos < rlScreenMax)
+	{
+	  rlScreenEnd = csbi.dwCursorPosition;
+	  rlScreenMax = linear_pos;
+	}
+      FillConsoleOutputCharacter(hStdout, ' ', count, csbi.dwCursorPosition, &written);
+    }
+#else /* !_WIN32 */
+#ifndef __MSDOS__
   if (_rl_term_clreol)
     tputs (_rl_term_clreol, 1, _rl_output_character_function);
-  else if (count)
+  else
+#endif
+  if (count)
     space_to_eol (count);
+#endif /* _WIN32 */
 }
 
 /* Clear to the end of the line using spaces.  COUNT is the minimum
@@ -2116,32 +2187,39 @@
 space_to_eol (count)
      int count;
 {
+#if defined (_WIN32)
+  _rl_clear_to_eol (count);
+#else
   register int i;
 
   for (i = 0; i < count; i++)
    putc (' ', rl_outstream);
 
   _rl_last_c_pos += count;
+#endif /* _WIN32 */
 }
 
 void
 _rl_clear_screen ()
 {
+#if !defined (_WIN32)
   if (_rl_term_clrpag)
     tputs (_rl_term_clrpag, 1, _rl_output_character_function);
   else
+#endif /* !_WIN32 */
     rl_crlf ();
 }
 
 /* Insert COUNT characters from STRING to the output stream at column COL. */
+#if !defined (_WIN32)
 static void
 insert_some_chars (string, count, col)
      char *string;
      int count, col;
 {
-#if defined (__MSDOS__) || defined (__MINGW32__)
+#if defined (__MSDOS__)
   _rl_output_some_chars (string, count);
-#else
+#else  /* !__MSDOS__ */
   /* DEBUGGING */
   if (MB_CUR_MAX == 1 || rl_byte_oriented)
     if (count != col)
@@ -2180,7 +2258,7 @@
       if (_rl_term_ei && *_rl_term_ei)
 	tputs (_rl_term_ei, 1, _rl_output_character_function);
     }
-#endif /* __MSDOS__ || __MINGW32__ */
+#endif /* !__MSDOS__ */
 }
 
 /* Delete COUNT characters from the display line. */
@@ -2191,7 +2269,7 @@
   if (count > _rl_screenwidth)	/* XXX */
     return;
 
-#if !defined (__MSDOS__) && !defined (__MINGW32__)
+#if !defined (__MSDOS__)
   if (_rl_term_DC && *_rl_term_DC)
     {
       char *buffer;
@@ -2204,8 +2282,9 @@
 	while (count--)
 	  tputs (_rl_term_dc, 1, _rl_output_character_function);
     }
-#endif /* !__MSDOS__ && !__MINGW32__ */
+#endif /* !__MSDOS__ */
 }
+#endif /* !_WIN32 */
 
 void
 _rl_update_final ()
@@ -2243,6 +2322,9 @@
 static void
 cr ()
 {
+#if defined (_WIN32)
+  _rl_move_cursor_relative (0, 0);
+#else
   if (_rl_term_cr)
     {
 #if defined (__MSDOS__)
@@ -2252,6 +2334,7 @@
 #endif
       _rl_last_c_pos = 0;
     }
+#endif /* _WIN32 */
 }
 
 /* Redraw the last line of a multi-line prompt that may possibly contain
@@ -2290,7 +2373,11 @@
      the right thing happens if we have wrapped to a new screen line. */
   if (_rl_term_cr)
     {
-#if defined (__MSDOS__)
+#if defined (_WIN32)
+      _rl_move_cursor_relative (0, 0);
+      space_to_eol (_rl_screenwidth);
+      _rl_move_cursor_relative (0, 0);
+#elif defined (__MSDOS__)
       putc ('\r', rl_outstream);
 #else
       tputs (_rl_term_cr, 1, _rl_output_character_function);
@@ -2299,7 +2386,7 @@
 #if defined (__MSDOS__)
       space_to_eol (_rl_screenwidth);
       putc ('\r', rl_outstream);
-#else
+#elif !defined (_WIN32)
       if (_rl_term_clreol)
 	tputs (_rl_term_clreol, 1, _rl_output_character_function);
       else
